package dateTimeUtils;

import javax.annotation.Nullable;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Contains Maps of date patterns, depends on if they contain dots, like 12.03.2022, slashes like 12/03/2022, dashes like 12-03-2022 or other generic patterns.
 * If you add a new pattern - please make sure you add it to the correct map and debug the regex you provided.
 * The class also contains a method that receives a Date String and returns the date pattern that matches it.
 * @author genosar.dafna
 * @since 20.09.2022
 * @since 21.11.2022
 */
@SuppressWarnings("unused")
public class DateParser {

    /**
     * Date patterns
     */
//  * @author genosar.dafna
//  * @since 20.09.2022
//  * @since 24.08.2023
    private static final Map<String, String> DATE_FORMAT_REGEX = new HashMap<>() {
        {
            put("hh:mm | dd MMM yy", "^(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])\\s[|]\\s((0[1-9]|[12][0-9]|3[01])\\s[a-zA-Z]{3})\\s[0-9][0-9]$");                 //05:09 | 22 Aug 23

            //Separated by dashes
            put("dd-MM-yyyy", "^((0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(19|2[0-9])[0-9]{2})$");                                                            //29-02-2012
            put("dd-MM-yyyy HH:mm", "^((0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                    //29-02-2012 23:59
            put("dd-MM-yyyy HH:mm:ss", "^((0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");  //29-02-2012 23:59:59

            put("MM-dd-yyyy", "^((0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|2[0-9])[0-9]{2})$");                                                            //02-22-2012
            put("MM-dd-yyyy HH:mm", "^((0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                         //02-29-2012 23:59
            put("MM-dd-yyyy HH:mm:ss", "^((0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");  //02-29-2012 23:59:59

            put("yyyy-MM-dd", "^((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$");                                                            //2012-02-29
            put("yyyy-MM-dd HH:mm", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                    //2012-02-29 23:59

            put("yyyy-MM-dd HH:mm:ss", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");  //2012-02-29 23:59:59
            put("yyyy-MM-dd HH:mm:ss.S", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).[0-9]$"); //2022-11-27 07:16:02.0
            put("yyyy-MM-dd HH:mm:ss.SS", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).\\d{2}$"); //2022-11-27 07:16:02.23

            put("yyyy-MM-dd HH:mm:ss.SSS XXX", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).\\d{3}\\s[-+]\\d{2}:\\d{2}$");     //2022-12-22 11:01:00.000 +01:00
            put("yyyy-MM-dd HH:mm:ss.SSS", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).\\d{3}$");         //2022-11-23 12:01:00.000
            put("yyyy-MM-dd HH:mm:ss.SSSSSSS", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).\\d{7}$");         //2023-03-22 11:01:00.0000000

            put("yyyy-MM-dd'T'HH:mm", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");             //2001-07-14T12:08
            put("yyyy-MM-dd'T'HH:mm:ss", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");             //2001-07-14T12:08:59
            put("yyyy-MM-dd'T'HH:mm:ss.SSS", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).\\d{3}$");        //2001-07-14T12:08:56.127
            put("yyyy-MM-dd'T'HH:mm:ss.SSSZ", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).\\d{3}[-+]\\d{2}\\d{2}$");        //2001-07-04T12:08:56.235-0700
            put("yyyy-MM-dd'T'HH:mm:ss.SSSXXX", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]).\\d{3}[-+]\\d{2}:\\d{2}$");  //2001-07-04T12:08:56.235-07:00
            put("yyyy-MM-dd'T'HH:mm:ssZ", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])[-+]\\d{2}\\d{2}$");        //2001-07-04T12:08:56.235-0700
            put("yyyy-MM-dd'T'HH:mm:ssXXX", "^(19|2[0-9])[0-9]{2}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])[-+]\\d{2}:\\d{2}$");  //2001-07-04T12:08:56.235-07:00

            //Separated by slashes
            put("MM/dd/yyyy", "^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|2[0-9])[0-9]{2})$");                                                                            //02/22/2012
            put("MM/dd/yyyy HH:mm", "^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                            //02/29/2012 23:59
            put("MM/dd/yyyy HH:mm a", "^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):\\d{2}\\s([AaPp][Mm])$");                            //02/29/2012 23:59 PM
            put("MM/dd/yyyy HH:mm:ss", "^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");    //02/29/2012 23:59:59
            put("MM/dd/yyyy hh:mm:ss a", "^((0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):\\d{2}:\\d{2}\\s([AaPp][Mm])$"); //07/14/2001 12:08:56 PM

            put("dd/MM/yy", "^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/([0-9])[0-9])$");                                                                                     //29/02/12
            put("dd/MM/yyyy", "^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/(19|2[0-9])[0-9]{2})$");                                                                            //29/02/2012
            put("dd/MM/yyyy HH:mm", "^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                            //29/02/2012 23:59
            put("dd/MM/yyyy HH:mm:ss", "^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");    //29/02/2012 23:59:59
            put("dd/MM/yyyy hh:mm:ss a", "^((0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):\\d{2}:\\d{2}\\s([AaPp][Mm])$"); //14/07/2001 12:08:56 PM

            put("yyyy/MM/dd", "^((19|2[0-9])[0-9]{2})/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])$");                                                                            //2012/02/29
            put("yyyy/MM/dd HH:mm", "^(19|2[0-9])[0-9]{2}/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                            //2012/02/29 23:59
            put("yyyy/MM/dd HH:mm:ss", "^(19|2[0-9])[0-9]{2}/(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");    //2012/02/29 23:59:59

            put("EEE dd/MM/yy HH:mm", "^(mon|tue|wed|thu|fri|sat|sun)\\s(0[1-9]|[12][0-9]|3[01])[/](0[1-9]|1[012])[/]([0-9][0-9])\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");    //Sun 19/03/23 14:00							                //Mon 19/09/22 10:00

            //Separated by dots
            put("MM.dd.yyyy", "^((0[1-9]|1[012])[.](0[1-9]|[12][0-9]|3[01])[.](19|2[0-9])[0-9]{2})$");                                         //07.31.2002
            put("MM.dd.yyyy HH:mm", "^((0[1-9]|1[012])[.](0[1-9]|[12][0-9]|3[01])[.](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$"); //02.29.2012 23:59
            put("MM.dd.yyyy HH:mm:ss", "^((0[1-9]|1[012])[.](0[1-9]|[12][0-9]|3[01])[.](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");     //07.31.2002 14:58:59

            put("dd.MM.yyyy", "^((0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|2[0-9])[0-9]{2})$");                                     //31.07.2002
            put("dd.MM.yyyy HH:mm", "^((0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                    //29.02.2012 23:59
            put("dd.MM.yyyy HH:mm:ss", "^((0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$"); //31.07.2002 14:58:59

            //General
            put("yyyyMMdd", "^(19|2[0-9])[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$");                                        //20220929
            put("yyyyMMddHHmm", "^(19|2[0-9])[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])(0[0-9]|[1-5][0-9])$");                       //202202292359
            put("yyyyMMdd HHmm", "^(19|2[0-9])[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3])(0[0-9]|[1-5][0-9])$");                   //20220229 2359
            put("yyyyMMddHHmmss", "^(19|2[0-9])[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|[1][0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])$");       //20220229235959
            put("yyyyMMdd HHmmss", "^(19|2[0-9])[0-9]{2}(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\\s(0[0-9]|[1][0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])$");   //20220229 235959

            put("MMddyyyy hh:mm a", "^((0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(19|2[0-9])[0-9]{2})\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])\\s([AaPp][Mm])$");   //12132023 03:05 PM

            //With month name
            put("d MMM yyyy", "^(([1-9])\\s[a-z]{3})\\s(19|2[0-9])[0-9]{2}$");                                                                                              //8 Jan 2022

            put("dd MMM yyyy", "^((0[1-9]|[12][0-9]|3[01])\\s[a-zA-Z]{3})\\s(19|2[0-9])[0-9]{2}$");                                                                            //29 Jan 2022
            put("dd MMM yyyy HH:mm", "^((0[1-9]|[12][0-9]|3[01])\\s[a-zA-Z]{3})\\s(19|2[0-9])[0-9]{2}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                      //29 Jan 2022 23:59
            put("dd MMM yyyy HH:mm:ss", "^((0[1-9]|[12][0-9]|3[01])\\s[a-zA-Z]{3})\\s(19|2[0-9])[0-9]{2}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$"); //29 Jan 2022 23:59:59

            put("dd-MMM-yyyy", "^((0[1-9]|[12][0-9]|3[01])[-][a-zA-Z]{3})[-](19|2[0-9])[0-9]{2}$");                                                          //29-Jan-2022

            put("MMM-dd-yyyy", "^([a-zA-Z]{3})[-](0[1-9]|[12][0-9]|3[01])[-](19|2[0-9])[0-9]{2}$");                                                          //Aug-22-2023
            put("MMM-dd-yyyy HH:mm", "^([a-zA-Z]{3})[-](0[1-9]|[12][0-9]|3[01])[-](19|2[0-9])[0-9]{2}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");     //Aug-22-2023 05:20

            put("MMM-d-yyyy", "^([a-zA-Z]{3})[-]([1-9]|[12][0-9]|3[01])[-](19|2[0-9])[0-9]{2}$");                                                          //Aug-2-2023
            put("MMM-d-yyyy HH:mm", "^([a-zA-Z]{3})[-]([1-9]|[12][0-9]|3[01])[-](19|2[0-9])[0-9]{2}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");     //Aug-2-2023 05:20

            put("dd MMMM yyyy", "^((0[1-9]|[12][0-9]|3[01])\\s[a-zA-Z]{4,})\\s(19|2[0-9])[0-9]{2}$");                                                        //29 January 2022
            put("dd MMMM yyyy HH:mm", "^((0[1-9]|[12][0-9]|3[01])\\s[a-zA-Z]{4,})\\s(19|2[0-9])[0-9]{2}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");                    //29 January 2022 23:59
            put("dd MMMM yyyy HH:mm:ss", "^((0[1-9]|[12][0-9]|3[01])\\s[a-zA-Z]{4,})\\s(19|2[0-9])[0-9]{2}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$"); //29 January 2022 23:59:59

            //With Day name
            put("EEE, MMM d, yyyy", "^(mon|tue|wed|thu|fri|sat|sun),\\s[a-zA-Z]{3}\\s\\d{1,2},\\s\\d{4}$");                                                                                             //Mon, Jul 4, 2022
            put("EEE, dd MMM yyyy HH:mm:ss", "^(mon|tue|wed|thu|fri|sat|sun),\\s\\d{1,2}\\s[a-zA-Z]{3}\\s\\d{4}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])$");                //Tue, 02 Jan 2018 18:07:59
            put("EEE, dd MMM yyyy HH:mm:ss z", "^(mon|tue|wed|thu|fri|sat|sun),\\s\\d{1,2}\\s[a-zA-Z]{3}\\s\\d{4}\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])\\s[A-Z]{3}$");    //Tue, 02 Jan 2018 18:07:59 IST
            put("EEE, HH:mm", "^(mon|tue|wed|thu|fri|sat|sun),\\s(0[0-9]|[1][0-9]|2[0-3]):(0[0-9]|[1-5][0-9])$");    //Sun, 14:00
        }
    };

    /**
     * Determines which Date pattern matches the Date String that was received
     * @param dateString a Date String in any pattern
     * @param monthFirst true if the month is before the day, false if the day is before the month
     * @return a Date pattern that matches the Date String
     * @author genosar.dafna
     * @since 20.09.2022
     * @since 21.11.2022
     */
    public static String determineDateFormat(String dateString, @Nullable Boolean monthFirst) {

        for(Map.Entry<String, String> formats : DATE_FORMAT_REGEX.entrySet()){
            String format = formats.getKey();
            String regX = formats.getValue();

            Pattern pattern = Pattern.compile(regX, Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(dateString);

            if (matcher.matches()) {
                if(monthFirst != null) {
                    int indexOfMonth = format.indexOf("M");
                    int indexOfDay = format.indexOf("d");

                    //If month and day exists in the format
                    if (indexOfMonth != -1 && indexOfDay != -1) {
                        if (((indexOfMonth < indexOfDay) && !monthFirst) || ((indexOfMonth > indexOfDay) && monthFirst))
                            continue;
                    }
                }
                return format;
            }
        }

        return null;
    }
}
